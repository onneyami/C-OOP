#include <iostream>

using namespace std;

//Захват контекста лямбдой | Лямбда функции | Лямбда-выражения | Анонимные функции

class MyClass{
public:
    int a = 11;
    
    void Msg(){cout << "Msg" << endl;}
    
    void Lambda(){
        auto f = [this](){      //чтобы передать в лямбду целый класс - пишем this в [] -> все поля и методы класса станут доступны внутри этой лямбды
            this->Msg();
        };
        f();
    }
};

int main() {
    setlocale(LC_ALL, "RU");
    
    auto f = []()->int      //жестко указать тип возвращаемого значения у лямбды можно через -> после ()
    {
        return 1;
    };
    f();
    
    auto result = f();
    
    /*
    MyClass m;
    m.Lambda();
    
    int a = 5;
    int b = 2;
    
    auto f = [](){return 0;};
    
    auto f_1 = [=](){        //= - передаем все переменные внешнего контекста по значению
        cout << a << endl;
        cout << b << endl;
    };
    
    auto f_2 = [&](){        //& - передаем все переменные внешнего контекста по ссылке
        a = 7;
        b = 4;
    };
    
    auto f_3 = [=]()mutable{     //захват по значению + слово mutable - имитация внутри лямбды как будто передали по ссылке, но сами по себе переменные во внешнем контексте менятся не будут
        a = 10;
        cout << a << endl;
        b = 20;
        cout << b << endl;
    };
    */
    
    return 0;
}
