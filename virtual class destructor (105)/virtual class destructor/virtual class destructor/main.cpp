#include <iostream>
#include <string>

using namespace std;

//Виртуальный деструктор класса C++. Что это такое

class A{
public:
    A(){
        cout << "Выделена динамическая память для объекта класса А" << endl;
    }
    
    virtual ~A(){
        cout << "Очищена динамическая память для объекта класса А" << endl;
    }
};

class B : public A{
public:
    B(){
        cout << "Выделена динамическая память для объекта класса B" << endl;
    }
    
    ~B() override {
        cout << "Очищена динамическая память для объекта класса B" << endl;
    }
};

int main() {
    setlocale(LC_ALL, "RU");
    
    A *bptr = new B;
    delete bptr;
    //в случае, если не указать virtual и override, то вызовутся два конструктора, но только один деструктор класса А
    
    return 0;
}

//Виртуальный деструктор используется, чтобы правильно очищать память при работе с классами наследниками через динамическую память
